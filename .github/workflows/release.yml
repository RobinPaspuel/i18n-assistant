name: Release

on:
  push:
    branches:
      - release 

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        target:
          - aarch64-apple-darwin  # Apple Silicon macOS

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Rust toolchain
      - name: Set up Rust
        uses: actions/setup-rust@v1
        with:
          rust-version: stable 

      # Step 3: Install additional target if necessary
      - name: Install target ${{ matrix.target }}
        run: rustup target add ${{ matrix.target }}

      # Step 4: Build the project for the specified target
      - name: Build for ${{ matrix.target }}
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TERM_COLOR: always

      # Step 5: Prepare binaries for upload
      - name: Prepare binaries
        id: prepare_binaries
        run: |
          mkdir -p release-binaries
          target_dir=target/${{ matrix.target }}/release
          # Extract the package name from Cargo.toml
          package_name=$(cargo metadata --format-version 1 | jq -r '.packages[0].name')

          # Determine the binary name based on target
          if [[ "${{ matrix.target }}" == "x86_64-pc-windows-gnu" ]]; then
            binary_name="${package_name}.exe"
          else
            binary_name="${package_name}"
          fi

          # Copy the binary to the release-binaries directory
          cp $target_dir/${binary_name} release-binaries/
          
          # Rename the binary to include the target for clarity
          mv release-binaries/${binary_name} release-binaries/${package_name}-${{ matrix.target }}
      
      # Step 6: Upload binaries as artifacts
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}-binary
          path: release-binaries/

  create-release:
    needs: build-and-release
    runs-on: ubuntu-latest
    steps:
      # Step 1: Download aarch64-apple-darwin binary
      - name: Download aarch64-apple-darwin binary
        uses: actions/download-artifact@v3
        with:
          name: aarch64-apple-darwin-binary
          path: binaries/aarch64-apple-darwin

      # Step 3: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          tag_name: v${{ github.run_number }}   
          release_name: Release v${{ github.run_number }}
          draft: false                          
          prerelease: false                     

      # Step 4: Upload aarch64-apple-darwin binary to the release
      - name: Upload aarch64-apple-darwin binary to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: binaries/aarch64-apple-darwin/my_cli-aarch64-apple-darwin
          asset_name: my_cli-aarch64-apple-darwin
          asset_content_type: application/octet-stream